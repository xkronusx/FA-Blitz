#!/bin/ansible-playbook
#
# Title:      LSIO Plex with HEALTHCHECK Flag
# Author(s):  Admin9705
# Moded:      MrDoob for ptS-Comm
# URL:        https://pgblitz.com - http://github.pgblitz.com
# GNU:        General Public License v3.0
################################################################################
---
- hosts: localhost
  gather_facts: false
  tasks:
    # FACTS #######################################################################
    - name: 'Set Known Facts'
      set_fact:
        pgrole: 'plex'
        intport: '32400/tcp'
        extport: '32400'
        intport2: '3005/tcp'
        extport2: '3005'
        intport3: '8324/tcp'
        extport3: '8324'
        intport4: '32410/udp'
        extport4: '32410'
        intport5: '32412/udp'
        extport5: '32412'
        intport6: '32413/udp'
        extport6: '32413'
        intport7: '32414/udp'
        extport7: '32414'
        image: 'linuxserver/plex:latest'

    # CORE (MANDATORY) ############################################################
    - name: 'Including cron job'
      include_tasks: '/opt/coreapps/apps/_core.yml'
    # FACTS #######################################################################
    - name: '{{pgrole}} Server Network Type'
      shell: 'cat /var/plexguide/plex.server'
      register: servertype

    - name: Register {{pgrole}}-Claim Number
      shell: 'cat /var/plexguide/plex.claim'
      register: claim

    - name: Register {{pgrole}} Update role
      shell: 'cat /var/plexguide/plex.updaterole'
      register: updateplex
      ######################################### FOR BOTH
    - name: 'Set Default Labels'
      set_fact:
        default_labels:
          traefik.enable: 'true'
          traefik.port: '{{intport}}'
          traefik.frontend.rule: 'Host:{{pgrole}}.{{domain.stdout}}{{tldset}}{{cname}}'
          traefik.frontend.headers.SSLHost: '{{domain.stdout}}'
          traefik.frontend.headers.SSLRedirect: 'true'
          traefik.frontend.headers.STSIncludeSubdomains: 'true'
          traefik.frontend.headers.STSPreload: 'true'
          traefik.frontend.headers.STSSeconds: '315360000'
          traefik.frontend.headers.browserXSSFilter: 'true'
          traefik.frontend.headers.contentTypeNosniff: 'true'
          traefik.frontend.headers.customResponseHeaders: 'X-Robots-Tag:noindex,nofollow,nosnippet,noarchive,notranslate,noimageindex'
          traefik.frontend.headers.forceSTSHeader: 'true'
          autoheal: 'true'

    - name: 'Set {{pgrole}} default Volume - {{ extension.stdout }}'
      set_fact:
        default_volumes:
          - '{{path.stdout}}:{{path.stdout}}'
          - '/opt/appdata/{{pgrole}}/database:/config'
          - '/tmp:/tmp'
          - '/opt/transcodes:/transcode'
          - '/dev/shm:/ram_transcode'

    - name: 'Establish Key Variables'
      set_fact:
        default_env:
          UID: '1000'
          GID: '1000'
          #  linuxserver.io enable linuxserver.io compatability. #
          PUID: '1000'
          PGID: '1000'
          DOCKER_MODS: 'justinglock40/lsioplexmod:latest'

    - name: Check {{pgrole}}-preferences.xml exists
      stat:
        path: '/opt/appdata/plex/database/Library/Application Support/Plex Media Server/Preferences.xml'
      register: plex_prefs

    ############### This is needed because on a fresh installaions the value is missing and is defaulted to 1 Security perfered
    - name: Register {{pgrole}} Log folder
      stat:
        path: '/opt/appdata/{{pgrole}}'
      register: pfolder

    - name: Create {{pgrole}} Log folder
      file: 'path={{item}} state=directory mode=0775 owner=1000 group=1000'
      with_items:
        - '/opt/appdata/{{pgrole}}/database/Library/Logs'
      when: pfolder.stat.exists == False
      ignore_errors: yes

    - name: secure Connections is missing
      xml:
        path: '/opt/appdata/plex/database/Library/Application Support/Plex Media Server/Preferences.xml'
        xpath: /Preferences/@secureConnections
        count: yes
      register: secure_hits
      when:
        - plex_prefs.stat.exists

      ############### This is needed because on a fresh installaions the value is missing and is defaulted to 1 Security perfered
    - name: Add secureConnections if missing
      xml:
        path: '/opt/appdata/plex/database/Library/Application Support/Plex Media Server/Preferences.xml'
        xpath: /Preferences
        attribute: secureConnections
        value: '1'
      when:
        - plex_prefs.stat.exists
        - secure_hits.count == 0

    - name: Read Preferences.xml
      xml:
        path: '/opt/appdata/plex/database/Library/Application Support/Plex Media Server/Preferences.xml'
        xpath: /Preferences
        content: attribute
      register: plex_pref_content
      when: plex_prefs.stat.exists

    - name: Add https to default_label if secureConnection != 2
      set_fact:
        default_labels: "{{default_labels | combine( {'traefik.protocol': 'https'} )}}"
      when:
        - plex_prefs.stat.exists
        - plex_pref_content.matches[0]['Preferences']['secureConnections']

    - name: Read custom Connections
      set_fact:
        customConnections: "{{plex_pref_content.matches[0]['Preferences']['customConnections']}}"
      when:
        - plex_prefs.stat.exists
        - plex_pref_content.matches[0]['Preferences']['customConnections'] is defined

    - name: custom Connections missing
      set_fact:
        customConnections: 'http://{{ipaddress.stdout}}:32400, http://plex.{{domain.stdout}}:32400'
      when:
        - plex_prefs.stat.exists == False

    - name: Edit Generate - Chapter -Thumb - Behavior to never
      xml:
        path: '/opt/appdata/plex/database/Library/Application Support/Plex Media Server/Preferences.xml'
        xpath: /Preferences
        attribute: GenerateChapterThumbBehavior
        value: 'never'
      when: plex_prefs.stat.exists

    - name: Edit Loudness - Analysis - Behavior to never
      xml:
        path: '/opt/appdata/plex/database/Library/Application Support/Plex Media Server/Preferences.xml'
        xpath: /Preferences
        attribute: LoudnessAnalysisBehavior
        value: 'never'
      when: plex_prefs.stat.exists

    - name: Edit Minutes - Allowed - Paused to max 10min
      xml:
        path: '/opt/appdata/plex/database/Library/Application Support/Plex Media Server/Preferences.xml'
        xpath: /Preferences
        attribute: MinutesAllowedPaused
        value: '10'
      when: plex_prefs.stat.exists

    - name: Edit Dlna-Enabled to disable 
      xml:
        path: '/opt/appdata/plex/database/Library/Application Support/Plex Media Server/Preferences.xml'
        xpath: /Preferences
        attribute: DlnaEnabled
        value: 'p'
      when: plex_prefs.stat.exists

    ##### remote part #####

    - name: 'Get {{pgrole}} Custom URL'
      shell: 'echo https://plex.{{domain.stdout}}:443,http://plex.{{domain.stdout}}:80'
      register: plex_url
      when: servertype.stdout == "remote"

    - debug: msg="Your plex_url is {{ plex_url.stdout }}"
      when: servertype.stdout == "remote"

    - set_fact:
        plex_advert_ip: 'http://{{ipaddress.stdout}}:32400'
      when: servertype.stdout == "remote"

    - set_fact:
        plex_advert_ip: '{{plex_url.stdout}}'
      when: servertype.stdout == "remote"

    - debug: msg="plex_advert_ip is {{plex_advert_ip}}"
      when: servertype.stdout == "remote"

    ##### local part #####

    - name: 'Get {{pgrole}} Custom URL'
      shell: 'echo http://{{ipaddress.stdout}}:32400,http://plex.{{domain.stdout}}:80'
      register: plex_url
      when: servertype.stdout == "local"

    - debug: msg="Your plex_url is {{ plex_url.stdout }}"
      when: servertype.stdout == "local"

    - set_fact:
        plex_advert_ip: 'http://{{ipaddress.stdout}}:32400'
      when: servertype.stdout == "local"

    - set_fact:
        plex_advert_ip: '{{plex_url.stdout}}'
      when: servertype.stdout == "local"

    - debug: msg="plex_advert_ip is {{plex_advert_ip}}"
      when: servertype.stdout == "local"

    ########################################## Other

    - name: Check /dev/dri exists
      stat:
        path: '/dev/dri'
      register: dev_dri

    - name: Create Transcodes Directory
      file: 'path={{item}} state=directory mode=0775 owner=1000 group=1000'
      with_items:
        - /opt/transcodes

    - name: customConnections FailSafe
      set_fact:
        customConnections: 'none'
      when: customConnections is undefined
    
    ######################################### AUTOHEAL Container
    - name: Deploy AUTOHEAL #https://github.com/willfarrell/docker-autoheal
      docker_container:
        name: autoheal
        image: willfarrell/autoheal
        pull: yes    
        env:
          AUTOHEAL_CONTAINER_LABEL: 'true'
        networks:
          - name: plexguide
            aliases:
              - autoheal
        volumes: '/var/run/docker.sock:/var/run/docker.sock'
        restart_policy: always
        state: started
        
    ######################################### DEPLOY PLEX REMOTE (ANSWER 2)
    - name: Deploy {{pgrole}} - Container (Remote Edition)
      docker_container:
        name: plex
        image: '{{image}}'
        pull: yes
        published_ports:
          - '{{extport}}:{{intport}}'
          - '{{ports.stdout}}{{extport2}}:{{intport2}}'
          - '{{ports.stdout}}{{extport3}}:{{intport3}}'
          - '{{ports.stdout}}{{extport4}}:{{intport4}}'
          - '{{ports.stdout}}{{extport5}}:{{intport5}}'
          - '{{ports.stdout}}{{extport6}}:{{intport6}}'
          - '{{ports.stdout}}{{extport7}}:{{intport7}}'
        env:
          PGID: '1000'
          PUID: '1000'
          VERSION: '{{updateplex.stdout}}'
          PLEX_CLAIM: '{{claim.stdout}}'
          ADVERTISE_IP: '{{customConnections}}'
          NVIDIA_VISIBLE_DEVICES: 'all'
          NVIDIA_DRIVER_CAPABILITIES: 'compute,video,utility'
        purge_networks: yes
        networks:
          - name: plexguide
            aliases:
              - plex
        healthcheck:
          test: "curl --silent --show-error --fail 'http://localhost:32400/identity' >/dev/null || exit 1"
          interval: '5s'
          timeout: '2s'
          retries: '20'
          start_period: '20s'
        volumes: '{{default_volumes}}'
        devices: "{{ '/dev/dri:/dev/dri' if dev_dri.stat.exists == True | default(false) else omit }}"
        etc_hosts:
          { 'analytics.plex.tv': '127.0.0.1', 'metrics.plex.tv': '127.0.0.1' }
        restart_policy: unless-stopped
        state: started
        labels: '{{default_labels}}'
      when: servertype.stdout == "remote"

    ######################################### DEPLOY PLEX LOCAL (ANSWER 3)
    - name: Deploy {{pgrole}} - Container (Local Edition)
      docker_container:
        name: plex
        image: '{{image}}'
        pull: yes
        published_ports:
          - '32400:32400/tcp'
          - '3005:3005/tcp'
          - '8324:8324/tcp'
          - '32469:32469/tcp'
          - '1900:1900/udp'
          - '32410:32410/udp'
          - '32412:32412/udp'
          - '32413:32413/udp'
          - '32414:32414/udp'
        env:
          PGID: '1000'
          PUID: '1000'
          VERSION: '{{updateplex.stdout}}'
          PLEX_CLAIM: '{{claim.stdout}}'
          ADVERTISE_IP: '{{customConnections}}'
          NVIDIA_VISIBLE_DEVICES: 'all'
          NVIDIA_DRIVER_CAPABILITIES: 'compute,video,utility'
        networks:
          - name: plexguide
            aliases:
              - plex
        healthcheck:
          test: "curl --silent --show-error --fail 'http://localhost:32400/identity' >/dev/null || exit 1"
          interval: '5s'
          timeout: '2s'
          retries: '20'
          start_period: '20s'
        volumes: '{{default_volumes}}'
        devices: "{{ '/dev/dri:/dev/dri' if dev_dri.stat.exists == True | default(false) else omit }}"
        etc_hosts:
          { 'analytics.plex.tv': '127.0.0.1', 'metrics.plex.tv': '127.0.0.1' }
        restart_policy: unless-stopped
        state: started
        labels: '{{default_labels}}'
      when: servertype.stdout == "local"

    # PLUGINS ####################################################
    - name: Check OpenMovieDatabase.Bundle exist
      stat:
        path: '/opt/appdata/plex/database/Library/Application Support/Plex Media Server/Plug-ins/OpenMovieDatabase.bundle'
      register: stat_result_openmovie

    - name: Clone OpenMovieDatabase.Bundle
      git:
        repo: 'https://github.com/piplongrun/OpenMovieDatabase.bundle.git'
        dest: '/opt/appdata/plex/database/Library/Application Support/Plex Media Server/Plug-ins/OpenMovieDatabase.bundle'
        clone: yes
        force: yes
      when: stat_result_openmovie.stat.exists == False
      ignore_errors: yes   

    - name: Check Trakt.tv Plugin exist
      stat:
        path: '/opt/appdata/plex/database/Library/Application Support/Plex Media Server/Plug-ins/Trakttv.bundle'
      register: stat_result_trakt

    - name: Clone Trakt.tv Plugin
      shell: |
        wget https://github.com/trakt/Plex-Trakt-Scrobbler/archive/master.zip -O /home/Plex-Trakt-Scrobbler.zip
        unzip /home/Plex-Trakt-Scrobbler.zip
        cp -r /home/Plex-Trakt-Scrobbler-*/Trakttv.bundle "/opt/appdata/plex/database/Library/Application Support/Plex Media Server/Plug-ins/"
        rm -rf /home/Plex-Trakt-Scrobbler*
      when: stat_result_trakt.stat.exists == False
      ignore_errors: yes

     ##### Db edits 
    - name: "Install package for {{pgrole}}-db Cache size Fix"
      apt:
        name: "{{ packages }}"
        state: latest
        update_cache: yes
      vars:
        packages:
        - sqlite3

    - name: Get Current {{pgrole}} DB Cache Size
      shell: |
        sqlite3 "/opt/appdata/plex/database/Library/Application Support/Plex Media Server/Plug-in Support/Databases/com.plexapp.plugins.library.db" \
        "PRAGMA default_cache_size;"
      args:
        executable: /bin/bash
      register: current_db_cache_size

    - name: Set 'default_db_cache_size' variable
      set_fact:
        default_db_cache_size: '6000'

    - name: Check if 'plex.db_cache_size' was specified
      set_fact:
        db_cache_size_is_specified: "{{ true if not (
            (plex.db_cache_size is undefined)
            or
            (plex.db_cache_size is none)
            or
            (plex.db_cache_size | trim | length == 0)
          )
          else false }}"

    - name: Get Desired {{pgrole}} DB Cache Size
      set_fact:
        desired_db_cache_size: "{{ default_db_cache_size
          if ( (not db_cache_size_is_specified) or (plex.db_cache_size == 'default') )
          else ( (plex.db_cache_size) | regex_replace(',', '') | int ) }}"

    - name: Make {{pgrole}} DB Edits
      block:

      - name: Stop {{pgrole}} Container
        docker_container:
          name: plex
          state: stopped
        when: ('plex_db_cache_size' in ansible_run_tags)

      - name: Display Desired Plex DB Cache Size
        debug:
          msg: "Desired Plex DB Cache Size is '{{ desired_db_cache_size }}'"

      - name: "Set {{pgrole}} DB Cache Size"
        shell: |
          sqlite3 "/opt/appdata/plex/database/Library/Application Support/Plex Media Server/Plug-in Support/Databases/com.plexapp.plugins.library.db" \
            "PRAGMA default_cache_size = '{{ desired_db_cache_size | int }}';"
        args:
          executable: /bin/bash

      - name: Get New {{pgrole}} DB Cache Size
        shell: |
          sqlite3 "/opt/appdata/plex/database/Library/Application Support/Plex Media Server/Plug-in Support/Databases/com.plexapp.plugins.library.db" \
            "PRAGMA default_cache_size;"
        args:
          executable: /bin/bash
        register: new_db_cache_size

      - name: Display New {{pgrole}} DB Cache Size
        debug:
          msg: "Plex DB cache size is now set to '{{ new_db_cache_size.stdout | int }}'."

       #####EOF.DB.EDITS

      - name: Start {{pgrole}} Container
        docker_container:
          name: plex
          state: started
        when: ('plex_db_cache_size' in ansible_run_tags)

      #### EOF Bundle ADD

    - debug: msg="Final Notes - {{servertype.stdout}} Plex | IP Address {{ipaddress.stdout}} | Token {{claim.stdout}} | Update level {{updateplex.stdout}}"
